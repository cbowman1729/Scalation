
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller, Casey Bowman
 *  @version 1.1
 *  @date    Sat 04 Jan 2014 03:18:01 PM EST 
 *  @see     LICENSE (MIT style license file).
 */

package scalation.process

import collection.mutable.ListBuffer

import scalation.animation.CommandType._
import scalation.random.Variate
import scalation.scala2d.{Ellipse, Rectangle}
import scalation.scala2d.Colors._
import scalation.util.Monitor.trace
import util.control.Breaks.{breakable, break}

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `Gate` class models the operation of gate that can open and shut.
 *  When the gate is open, entities can flow through and when shut, they
 *  cannot.  They may wait in a queue or go elsewhere.  A gate can model
 *  a traffic light (green => open, red => shut).
 *  @param name      the name of the gate
 *  @param director  the model/container for this gate
 *  @param line      the queue holding entities waiting for this gate to open
 *  @param units     number of units/phases of operation
 *  @param onTime    distribution of time that gate will be open
 *  @param offTime   distribution of time that gate will be closed
 *  @param at        the location of the Gate (x, y, w, h)
 *  @param shut0     boolean indicating if the gate is initially opened or closed
 *  @param cap       the maximum number of entities that will be released when the gate is opened
 */
class Gate (name: String, director: Model, line: WaitQueue, units: Int, 
            private var onTime: Variate, private var offTime: Variate,
            at: Array [Double], offset1: Double = 0.0, offset2: Double, shut0: Boolean = false, 
            cap: Int = 10, _redirect: Component = null)
      extends SimActor (name, director) with Component
{
    if (line == null) flaw ("constructor", "must have line for entities when gate is closed")

//    randomVariables += onTime
//    randomVariables += offTime
    initStats (name)
    setAt (at)

    private var first = true       // says whether this is the first time through the timing loop

    private var controlled = false

    private var _shut = shut0

    private var _controller = -1;

//    var num = 0;

    var ServiceTime: Variate = null

    var n2Release = cap
 
    schedule (0.0)       // gates are not created at sources so they need to be scheduled for time 0.0

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Auxiliary constructor that uses defaults for width (w) and heigth (h).
     *  @param name      the name of the gate
     *  @param director  the model/container for this gate
     *  @param line      the queue holding entities waiting for this gate to open
     *  @param units     number of units/phases of operation
     *  @param onTime    distribution of time that gate will be open
     *  @param offTime   distribution of time that gate will be closed
     *  @param xy        the (x, y) coordinates for the top-left corner of the sink.
     *  @param shut0     boolean indicating if the gate is initially opened or closed
     *  @param cap       the maximum number of entities that will be released when the gate is opened
     */
    def this (name: String, director: Model, line: WaitQueue, units: Int, onTime: Variate, offTime: Variate,
              xy: Tuple2 [Double, Double], offset1: Double, offset2: Double, shut0: Boolean, cap: Int)
    {
        this (name, director, line, units, onTime, offTime, Array (xy._1, xy._2, 20.0, 20.0), offset1, offset2, shut0, cap)
    } // constructor

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return whether the gate is shut (e.g., traffic light is red).
     */
    def shut: Boolean = _shut
    
    def redirect = _redirect

    def setTimes (on: Variate, off: Variate) 
    {
        onTime  = on
        offTime = off
    }
 
    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Tell the animation engine to display this Gate.
     */
    def display ()
    {
        director.animate (this, CreateNode, gateColor, Ellipse (), at)
        director.animate (line, CreateNode, cyan, Rectangle (), line.at)
    } // display

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Release the Gate after service is finished (also check waiting queue).
     */
    var j = 0
    def release (durat: Double): Double =
    {
        var dur = 0.0
        var end = director.clock + durat
        var count = 0
        val queuelength = line.size
        while (director.clock < end && ! line.isEmpty ) {
            val waitingActor = line.dequeue ()
            trace (this, "releases", waitingActor, director.clock)
            if (ServiceTime != null) dur = ServiceTime.gen
            if (director.clock + dur < end) {
	    	count += 1
            	tally (dur)
            	schedule (dur)                  
            	yieldToDirector ()
	    } // if
        } // while    
        println ("released cars = " + count + " of " + queuelength)    
        yieldToDirector ()
        if (director.clock < end) end - director.clock
        else 0.0
    } // release

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Specifies how the gate is controlled.
     */
    def act ()
    {
        for (rep <- 1 to director.reps) {        
            breakable { for (i <- 1 to units) {    
                if (director.stopped) break
                flip ()
                var dur = duration + (if (first) { first = false; offset1 + offset2 } else 0.0)
                if (! _shut) dur = release (dur)
                director.animate (this, SetPaintNode, gateColor, Rectangle (), at)            
                tally (dur)    
                schedule (dur)
                yieldToDirector ()
            } } // for
            yieldToDirector ()
        }
//        if (rep == director.reps) zombify ()
//        yieldToDirector ()        
    } // act

    def setController (i: Int) { _controller = i }
 
    def toggleControlled () { controlled = ! controlled }

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the current color of the gate which indicates (within the animation)
     *  whether the gate is open or closed.
     */
    def gateColor: Color = if (_shut) red else green

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Toggles the value of shut.
     */
    def flip () { _shut = ! _shut }

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Returns a Double for the amount of time the gate should stay open or closed
     *  based on whether or not the gate is open or closed
     */
    def duration: Double = if (_shut) offTime.gen else onTime.gen

    override def toString = "Gate(" + name + ")"

} // Gate


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `Gate` companion object provides a builder method for gates.
 */
object Gate
{
    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Create a gate using defaults for width (w) and heigth (h).
     *  @param name      the name of the gate
     *  @param director  the model/container for this gate
     *  @param line      the queue holding entities waiting for this gate to open
     *  @param units     number of units/phases of operation
     *  @param onTime    distribution of time that gate will be open
     *  @param offTime   distribution of time that gate will be closed
     *  @param xy        the (x, y) coordinates for the top-left corner of the sink.
     *  @param shut0     boolean indicating if the gate is initially opened or closed
     *  @param cap       the maximum number of entities that will be released when the gate is opened
     */
    def apply (name: String, director: Model, line: WaitQueue, units: Int, onTime: Variate, offTime: Variate,
              xy: Tuple2 [Int, Int], size: Tuple2 [Int, Int] = (20, 20), offset1: Double = 0.0, offset2: Double = 0.0,  
              shut0: Boolean = false, cap: Int = 10, redirect: Gate = null): Gate =
    {
        new Gate (name, director, line, units, onTime, offTime,
                  Array (xy._1.toDouble, xy._2.toDouble, size._1, size._2), offset1, offset2, shut0, cap, redirect)
    } // apply

/*    def apply (name: String, director: Model, line: WaitQueue, units: Int, onTime: Variate, offTime: Variate,
              at: Array [Double], offset: Double = 0.0, shut0: Boolean = false, cap: Int = 10, redirect: Gate = null): Gate =
    {
        new Gate (name, director, line, units, onTime, offTime, at, offset, shut0, cap, redirect)
    } // apply
*/

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Create a group of related gates using defaults for width (w) and heigth (h).
     *  @param director  the director controlling the model
     *  @param units     number of units/phases of operation
     *  @param onTime    distribution of time that gate will be open
     *  @param offTime   distribution of time that gate will be closed
     *  @param xy        the (x, y) coordinates for the top-left corner of the reference gate.
     *  @param gte       repeated gate specific info: name, line, offset
     */
    def group (director: Model, units: Int, onTime: Variate, offTime: Variate, xy: Tuple2 [Int, Int], 
               gte: Tuple3 [String, WaitQueue, Tuple2 [Int, Int]]*): List [Gate] =
    {
        val gateGroup = new ListBuffer [Gate] ()
        var odd = false
        for (g <- gte) {
            gateGroup += (if (odd) Gate (g._1, director, g._2, units, onTime, offTime, 
                                        (xy._1 + g._3._1, xy._2 + g._3._2), shut0 = true)
                          else     Gate (g._1, director, g._2, units, offTime, onTime,
                                        (xy._1 + g._3._1, xy._2 + g._3._2), shut0 = false))
            odd = ! odd
        } // for
        gateGroup.toList
    } // group
  
    def group (director: Model, units: Int, onTime: Variate, offTime: Variate, xy: Tuple2 [Int, Int],   
               size: Tuple2 [Int, Int], offset1: Double, offset2: Array [Double], cap: Int, 
               redirect: Array [Gate], gte: Tuple3 [String, WaitQueue, Tuple2 [Int, Int]]*): List [Gate] =
    {
        val gateGroup = new ListBuffer [Gate] ()
        var odd = false
        var count = 0
        for (g <- gte) {
            gateGroup += (if (odd) new Gate (g._1, director, g._2, units, onTime, offTime, 
                                            Array (xy._1 + g._3._1, xy._2 + g._3._2, size._1, size._2), offset1, offset2(0), true, cap, if (redirect == null) null else redirect(count))
                          else     new Gate (g._1, director, g._2, units, offTime, onTime,
                                            Array (xy._1 + g._3._1, xy._2 + g._3._2, size._1, size._2), offset1, offset2(1), false, cap, if (redirect == null) null else redirect(count)))
            odd = ! odd
            count += 1
        } // for
        gateGroup.toList
    } // group

} // Gate object

