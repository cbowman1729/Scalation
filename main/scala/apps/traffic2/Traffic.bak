
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 1.1
 *  @date    Sun Feb 16 21:30:20 EST 2014
 *  @see     LICENSE (MIT style license file).
 */

package apps.traffic2

import java.util.concurrent.Semaphore
import java.io.{BufferedReader, FileReader, FileWriter}

import collection.mutable.ListBuffer

import math.{abs, round}

import scalation.analytics._
import scalation.calculus.Calculus.FunctionS2S
import scalation.linalgebra.{MatrixD, VectorD}
import scalation.metamodel.QuadraticFit
import scalation.minima._
import scalation.process._
import scalation.random.{Bernoulli, Sharp, Uniform, Variate}
import scalation.stat.StatVector
import scalation.util.Monitor._

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `Traffic` object is used to run the `TrafficModel` class.
 */
object Traffic extends App 
{
    val maxCars = 50
    val onTimeRV  = Array (Sharp (8000).asInstanceOf [Variate], 
                           Sharp (6000).asInstanceOf [Variate],
                           Sharp (4000).asInstanceOf [Variate],
                           Sharp (3000).asInstanceOf [Variate])
    val offTimeRV = Array (Sharp (3000).asInstanceOf [Variate],
                           Sharp (4000).asInstanceOf [Variate],
                           Sharp (6000).asInstanceOf [Variate], 
                           Sharp (8000).asInstanceOf [Variate])
    val rm = new TrafficModel ("traffic", maxCars, Uniform (4000, 6000),
                               onTimeRV, offTimeRV, onTimeRV, offTimeRV, 
                               Uniform (2900, 3100)) //, Array(0.0, 0.0), 
                               //Array(0.0, 0.0), Array(0.0, 0.0))
    rm.simulate ()
    

} // Traffic2 object

/*
object CreateQuadraticFit extends App
{
    val br = new BufferedReader (new FileReader ("responses.txt"))
    var line: String = null
    def f (x: VectorD): Double = 0.0
    val x0 = VectorD (40.0, 40.0, 30.0, 30.0)    // (NWGreen, EWGreen, turn, offset)
    val xs = VectorD (1.0, 1.0, 1.0, 1.0)
    val n = 4
    val nt = ((n + 1) * (n + 2)) / 2
    val qf = new QuadraticFit (f, n)
    qf.formGrid (x0, xs)
    val grid = qf.getGrid ()
    val x = new MatrixD (grid.size, nt)
    for (i <- 0 until grid.size) x(i) = qf.qForms (grid(i))
    val y = new VectorD (grid.size)
    var done = false
    while (!done) {
        line = br.readLine ()
        if (line == null) done = true
        else {
            val s = line.split(",")
            val k = s(0).toInt
            y(k) = s(1).toDouble
        }
    }
    qf.printQForms ()
    qf.fit ((x,y))
    
    def fp (x: VectorD): Double = qf.qFormsEval (x)

    def gp (x: VectorD): Double =
    {
        var sum = 0.0
        for (i <- 0 until x.dim) if (x(i) < 0.0) sum -= x(i)	
        sum
    }

    val opt  = new QuasiNewton (fp)
    val opt2 = new ConjGradient (fp)
    val opt3 = new SteepestDescent (fp)
    val res  = opt.solve (x0)
    val res2 = opt2.solve (x0)
    val res3 = opt3.solve (x0)
    println ("x = " + res + ", f(x) = " + fp(res))
    println ("x = " + res2 + ", f(x) = " + fp(res2))
    println ("x = " + res3 + ", f(x) = " + fp(res3))
}*/

/*
object TrafficOpt extends App
{
    var k = 0
    if (args.length > 0) k = args(0).toInt

//    val fw = new FileWriter ("responses.txt", true)

    val REPS = 2
    val out   = new MatrixD (REPS, 1)
    val in    = new VectorD (0)    
    var counter = 0
    val sema  = new Semaphore (0)

    val upper = Array (80.0, 80.0, 60.0, 60.0)
    val lower = Array (5.0,  5.0,  1.0,  0.0)

    var functionCallCount = 0
    var runReplicasCount  = 0

    val x0 = VectorD (40.0, 40.0, 30.0, 30.0)    // (NWGreen, EWGreen, turn, offset)
    val xs = VectorD (1.0, 1.0, 1.0, 1.0)

    val intOffsets = Array.ofDim [Double] (4)

    val mainOffsets = Array.ofDim [Double] (2)
    val turnOffsets = Array.ofDim [Double] (2)

    val onTimeRV      = Array.ofDim [Variate] (4)
    val offTimeRV     = Array.ofDim [Variate] (4)
    val onTurnTimeRV  = Array.ofDim [Variate] (4)
    val offTurnTimeRV = Array.ofDim [Variate] (4)
 
    val qf = new QuadraticFit (f,4)
    qf.formGrid (x0, xs)
    val grid = qf.getGrid ()


    
//    val end = if (grid.size - k < 100) grid.size else k + 100 
//    val end = grid.size

//    for (i <- 0 until end) {
//        print (i + ": ")
//        fw.write (i + "," + f(grid(i)) + "\n")
//    }
//    fw.close ()

    val result = qf.response (k)
    val xx = result._1
    val yy = result._2
/*
    qf.fit (result)
    
    def fp (x: VectorD): Double = qf.qFormsEval (x)

    val optimizer = new QuasiNewton (fp, gp)
    
    val res = optimizer.solve (x0)

    println ("solution: x = " + res + " and f(x) = " + fp(res))
*/
    def gp (x: VectorD): Double =
    {
        var sum = 0.0
        for (i <- 0 until x.dim) if (x(i) < 0.0) sum -= x(i)
        100 * sum
    }

    def f (x: VectorD): Double = 
    {      
        val NSGrn  = x(0)
        val EWGrn  = x(1)
        val turn   = x(2)
        val offset = x(3)
        val NSRed  = EWGrn + 2 * turn
        val EWRed  = NSGrn + 2 * turn
        
        turnOffsets(0) = 0.0
        mainOffsets(0) = turn
        turnOffsets(1) = turn + NSGrn
        mainOffsets(1) = 2 * turn + NSGrn

        intOffsets(0) = 0.0
        intOffsets(1) = offset
        intOffsets(2) = 0.0
        intOffsets(3) = offset 

        onTimeRV (0) = Sharp(NSGrn)
        offTimeRV(0) = Sharp(NSRed)
        onTimeRV (1) = Sharp(EWGrn)
        offTimeRV(1) = Sharp(EWRed)
        onTimeRV (2) = Sharp(NSGrn)
        offTimeRV(2) = Sharp(NSRed)
        onTimeRV (3) = Sharp(EWGrn)
        offTimeRV(3) = Sharp(EWRed)


        onTurnTimeRV (0) = Sharp (turn)
        offTurnTimeRV(0) = Sharp (NSGrn + EWGrn + turn)
        onTurnTimeRV (1) = Sharp (turn)
        offTurnTimeRV(1) = Sharp (NSGrn + EWGrn + turn)
        onTurnTimeRV (2) = Sharp (turn)
        offTurnTimeRV(2) = Sharp (NSGrn + EWGrn + turn)
        onTurnTimeRV (3) = Sharp (turn)
        offTurnTimeRV(3) = Sharp (NSGrn + EWGrn + turn)      

        val tm = new TrafficModel ("Traffic Model" + counter, 1000, Uniform (5, 20), 
                                   onTimeRV, offTimeRV, onTurnTimeRV, offTurnTimeRV,
                                   Uniform (20, 30), intOffsets, mainOffsets,
                                   turnOffsets)
        tm.setStopTime (400.0)
        tm.simulate (0.0)               
        tm.complete ()
//        val waitTime = tm.getStatistics(2).mean        
        val parts = tm.getParts
        var sum = 0.0
        var nums = 0.0
        for (p <- parts if p.isInstanceOf [Sink]) {  
            val pnum  = p.durationStat.num
            val pmean = p.durationStat.mean
            sum += pnum * pmean
            nums += pnum
        }
        val res = sum / nums
        
        println ("x = " + x + ", f(x) = " + res)
        res

    }

    def g (x: VectorD): Double =
    {      
        var sum = 0.0

        for (i <- 0 until x.dim) {
            if (x(i) < lower(i)) sum += abs (x(0) - lower(i))
            if (x(i) > upper(i)) sum += abs (x(0) - upper(i))
        }    
        100.0 * sum
    } 

}
 */

object TrafficOpt extends App
{
    val onTimeRV      = Array.ofDim [Variate] (4)
    val offTimeRV     = Array.ofDim [Variate] (4)
    val onTurnTimeRV  = Array.ofDim [Variate] (4)
    val offTurnTimeRV = Array.ofDim [Variate] (4)

    def f (x: VectorD): Double =
    {      
        val NSGrn  = x(0)
        val EWGrn  = x(1)
        val turn   = x(2)
        val offset = x(3)
        val NSRed  = EWGrn + 2 * turn
        val EWRed  = NSGrn + 2 * turn

        /*
        turnOffsets(0) = 0.0
        mainOffsets(0) = turn
        turnOffsets(1) = turn + NSGrn
        mainOffsets(1) = 2 * turn + NSGrn

        intOffsets(0) = 0.0
        intOffsets(1) = offset
        intOffsets(2) = 0.0
        intOffsets(3) = offset 
        */

        onTimeRV (0) = Sharp(NSGrn)
        offTimeRV(0) = Sharp(NSRed)
        onTimeRV (1) = Sharp(EWGrn)
        offTimeRV(1) = Sharp(EWRed)
        onTimeRV (2) = Sharp(NSGrn)
        offTimeRV(2) = Sharp(NSRed)
        onTimeRV (3) = Sharp(EWGrn)
        offTimeRV(3) = Sharp(EWRed)

        onTurnTimeRV (0) = Sharp (turn)
        offTurnTimeRV(0) = Sharp (NSGrn + EWGrn + turn)
        onTurnTimeRV (1) = Sharp (turn)
        offTurnTimeRV(1) = Sharp (NSGrn + EWGrn + turn)
        onTurnTimeRV (2) = Sharp (turn)
        offTurnTimeRV(2) = Sharp (NSGrn + EWGrn + turn)
        onTurnTimeRV (3) = Sharp (turn)
        offTurnTimeRV(3) = Sharp (NSGrn + EWGrn + turn)      

        val tm = new TrafficModel ("Traffic Model", 1000, Uniform (5, 20), 
                                   onTimeRV, offTimeRV, onTurnTimeRV, offTurnTimeRV,
                                   Uniform (20, 30)) //, intOffsets, mainOffsets,
                                   // turnOffsets)
        tm.setStopTime (400.0)
        tm.simulate (0.0)               
        tm.complete ()
//        val waitTime = tm.getStatistics(2).mean        
        val parts = tm.getParts
        var sum = 0.0
        var nums = 0.0
        for (p <- parts if p.isInstanceOf [Sink]) {  
            val pnum  = p.durationStat.num
            val pmean = p.durationStat.mean
            sum += pnum * pmean
            nums += pnum
        }
        val res = sum / nums
        
        println ("x = " + x + ", f(x) = " + res)
        res
    } // f



    val x = VectorD (200, 200, 50, 100)

    for (i <- 0 until 800) {
        println ("************************************ starting run " + i)
        Coroutine.startup ()
        f (x)
        Coroutine.shutdown ()
    } // for

} // TrafficOpt



//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `Intersection4` class represents a four-way intersection.
 *
 */
class Intersection4 (name: String, pos: Tuple2 [Int, Int], model: Model, makeEntity: () => SimActor,
                     nArrivals: Int, iArrRV: Variate, onTimeRV: Variate,
                     offTimeRV: Variate, onTurnTimeRV: Variate, offTurnTimeRV: Variate,
                     val moveRV: Variate, size: Tuple2 [Int, Int] = (250, 250), 
                     offset: Double = 0.0, mainOffsets: Array[Double] = Array(0.0, 0.0), 
                     turnOffsets: Array[Double] = Array(0.0, 0.0))
{
    var (x, y) = pos // 800, 250
//    x += 250
//    y += 20

    val sourceX        = x + (round (.35 * size._1)).asInstanceOf [Int]
    val sourceY        = y
    val sourceWidth    = (round (.05 * size._1)).asInstanceOf [Int]
    val sourceHeight   = sourceWidth

    val source = Source.group (model, makeEntity, nArrivals, (sourceX, sourceY), 
        // (sourceWidth, sourceHeight),
        (name + "-sN", 0, Sharp (1e6), (0, 0)),
        (name + "-sE", 1, iArrRV, ((round ( .6  * size._1)).asInstanceOf [Int],
                                   (round ( .35 * size._2)).asInstanceOf [Int])),
        (name + "-sS", 2, iArrRV, ((round ( .25 * size._1)).asInstanceOf [Int],
                                   (round ( .95 * size._2)).asInstanceOf [Int])),
        (name + "-sW", 3, iArrRV, ((round (-.35 * size._1)).asInstanceOf [Int],
                                   (round ( .6  * size._2)).asInstanceOf [Int]))).toArray

    val queueX      = sourceX
    val queueY      = y + (round (.225 * size._2)).asInstanceOf [Int]
    val queueWidth  = sourceWidth
    val queueHeight = sourceHeight

    val queue = WaitQueue.group ((queueX, queueY), // (queueWidth, queueHeight), 
        (name + "-qN", (0, 0)),
        (name + "-qE", ((round ( .375 * size._1)).asInstanceOf [Int], 
                        (round ( .125 * size._2)).asInstanceOf [Int])),
        (name + "-qS", ((round ( .25  * size._1)).asInstanceOf [Int],
                        (round ( .5   * size._2)).asInstanceOf [Int])),
        (name + "-qW", ((round (-.125 * size._1)).asInstanceOf [Int],
                        (round ( .375 * size._2)).asInstanceOf [Int]))).toArray

    val turnQX      = x + (round (.425 * size._1)).asInstanceOf [Int]
    val turnQY      = queueY
    val turnQWidth  = sourceWidth
    val turnQHeight = sourceHeight

    val turnQueue = WaitQueue.group ((turnQX, turnQY), // (turnQWidth, turnQHeight),
        (name + "-tqN", (0, 0)),
        (name + "-tqE", ((round ( .3 * size._1)).asInstanceOf [Int],
                         (round ( .2 * size._2)).asInstanceOf [Int])),
        (name + "-tqS", ((round ( .1 * size._1)).asInstanceOf [Int],
                         (round ( .5 * size._2)).asInstanceOf [Int])),
        (name + "-tqW", ((round (-.2 * size._1)).asInstanceOf [Int], 
                         (round ( .3 * size._2)).asInstanceOf [Int]))).toArray

    val lightX      = sourceX
    val lightY      = y + (round (.625 * size._2)).asInstanceOf [Int]
    val lightWidth  = sourceWidth
    val lightHeight = sourceHeight

    val light = Gate.group (model, nArrivals, onTimeRV, offTimeRV, (lightX, lightY), 
        // (lightWidth, lightHeight),
        // offset, mainOffsets,
        (name + "-lN", queue(0), (0, 0)),    
        (name + "-lE", queue(1), ((round (-.025 * size._1)).asInstanceOf [Int], 
                                  (round (-.275 * size._2)).asInstanceOf [Int])),
        (name + "-lS", queue(2), ((round ( .25  * size._1)).asInstanceOf [Int],
                                  (round (-.3   * size._2)).asInstanceOf [Int])),
        (name + "-lW", queue(3), ((round ( .275 * size._1)).asInstanceOf [Int], 
                                  (round (-.025 * size._2)).asInstanceOf [Int]))).toArray

    val turnLX      = turnQX
    val turnLY      = lightY
    val turnLWidth  = sourceWidth
    val turnLHeight = sourceHeight

    val turnLight = Gate.group (model, nArrivals, onTurnTimeRV, offTurnTimeRV, (turnLX, turnLY),
        // (turnLWidth, turnLHeight),
        // offset, turnOffsets, 100,
        //Array (light(1), light(2), light(3), light(0)),
        (name + "-tlN", turnQueue(0), (0, 0)),    
        (name + "-tlE", turnQueue(1), ((round (-.1 * size._1)).asInstanceOf [Int], 
                                       (round (-.2 * size._2)).asInstanceOf [Int])),
        (name + "-tlS", turnQueue(2), ((round ( .1 * size._1)).asInstanceOf [Int],
                                       (round (-.3 * size._2)).asInstanceOf [Int])),
        (name + "-tlW", turnQueue(3), ((round ( .2 * size._1)).asInstanceOf [Int], 
                                       (round (-.1 * size._2)).asInstanceOf [Int]))).toArray

    val sinkX      = x + (round (.6 * size._1)).asInstanceOf [Int]
    val sinkY      = y
    val sinkWidth  = sourceWidth
    val sinkHeight = sourceHeight
    
    val sink = Sink.group ((sinkX, sinkY), // (sinkWidth, sinkHeight), 
        (name + "-kN", (0, 0)),
        (name + "-kE", ((round ( .35 * size._1)).asInstanceOf [Int], 
                        (round ( .6  * size._2)).asInstanceOf [Int])),
        (name + "-kS", ((round (-.25 * size._1)).asInstanceOf [Int], 
                        (round ( .95 * size._2)).asInstanceOf [Int])),
        (name + "-kW", ((round (-.6  * size._1)).asInstanceOf [Int], 
                        (round ( .35 * size._2)).asInstanceOf [Int]))).toArray

    val roadIn  = Array.tabulate (source.size) (i => {
        new Route ("ra" + i, 2, source(i), queue(i), moveRV)
    })

    val roadOut = Array.tabulate (sink.size) (i => {
        new Route ("rb" + i, 2, light(i),  sink((i + 2) % 4),  moveRV)
    })

    val qlPair = Array.tabulate (queue.size) (i => (queue(i), (light(i), light((i + 1) % 4))))
 
    val tqlPair = Array.tabulate (turnQueue.size) (i => (turnQueue(i), (turnLight (i), light ((i + 3) % 4))))

//    val tqlPair = Array.tabulate (turnQueue.size) (i => (turnQueue(i), turnLight(i).redirect))

    import Intersection4._

    def _fourthf (x: Double): Double = 0.25

    def _halff (x: Double): Double = 0.5

    def north () : IWGD  =
    {
        (this, queue(0), turnQueue(0), light(2), Direction("NORTH"))
    } // north

    def east () : IWGD =
    {
        (this, queue(1), turnQueue(1), light(3), Direction("EAST"))
    } // east

    def south () : IWGD =
    {
        (this, queue(2), turnQueue(2), light(0), Direction("SOUTH"))
    } // south

    def west () : IWGD =
    {
        (this, queue(3), turnQueue(3), light(1), Direction("WEST"))
    } // west

    def getComponents (): List [Component] =
    {
        (source ++: queue ++: turnQueue ++: light ++: turnLight ++: sink ++: roadIn ++: roadOut).filter(e => e != null).toList
    } // getComponents

} // Intersection4

object Intersection4
{
    case class Direction (val name: String)

    type IWGD = Tuple5 [Intersection4, WaitQueue, WaitQueue, Gate, Direction]

    private def index (d: Direction): Int =
    {
        d match {
            case Direction("NORTH") => 0
            case Direction("EAST")  => 1
            case Direction("SOUTH") => 2
            case Direction("WEST")  => 3
        } // match
    } // index

    def join(a: IWGD, b: IWGD, fa: Tuple2 [FunctionS2S, FunctionS2S], 
                               fb: Tuple2 [FunctionS2S, FunctionS2S]): Unit =
    {
        val (i1, wq1, tq1, g1, d1) = a 
        val (i2, wq2, tq2, g2, d2) = b

        // get source and sink indices
        val i1i = index (d1)
        val i2i = index (d2)

        // remove source and sink from i1
        i1.source(i1i) = null
        i1.sink(i1i)   = null

        // remove source and sink from i2        
        i2.source(i2i) = null
        i2.sink(i2i)   = null

        // add the roads to the intersections
        val r1 = new Route (d1.name + "-" + d2.name, 2, g1, wq2, i1.moveRV) // , false, fb, 0.0, 0.0, tq2)
        val r2 = new Route (d2.name + "-" + d1.name, 2, g2, wq1, i2.moveRV) // , false, fa, 0.0, 0.0, tq1)

        i1.roadIn(i1i)            = r2
        i1.roadOut((i1i + 2) % 4) = r1
        i2.roadIn(i2i)            = r1
        i2.roadOut((i2i + 2) % 4) = r2

    } // join

} // Intersection4 object

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `TrafficModel` class simulates an intersection with four traffic lights
 *  (`Gates`) and four roads.  Each road consists of two routes with one in each
 *  direction.  Each `Route` has two lanes (`Transport`s).
 *  @param name       the name of the bank model
 *  @param nArrivals  the number of arrivals to generate (stopping condition)
 *  @param iArrlRV    the inter-arrival time distribution
 *  @param onTimeRV   the on (green-light) time distribution for North-South traffic
 *  @param offTimeRV  the off (red-light) time distribution for North-South traffic
 *  @param moveRV     the time distribution for motion along transports
 */
class TrafficModel (name: String, nArrivals: Int, iArrRV: Variate,
                         onTimeRV: Array [Variate], offTimeRV: Array [Variate],
                         onTurnTimeRV: Array [Variate], offTurnTimeRV: Array [Variate], 
                         moveRV: Variate) //, intOffsets: Array[Double], 
                         // mainOffsets: Array[Double], turnOffsets: Array[Double])
      extends Model (name, animating = false) //2, 1.0, false)
{

    // reportsOff ()
    traceOff ()

    val rng  = Bernoulli ()

    val size = (300, 300)
    val buffer = (size._1 >> 2, size._2 >> 2)
 
    val loc1 = (50, 50)
    val loc2 = (loc1._1 + size._1 + buffer._1, loc1._2)
    val loc3 = (loc2._1,  loc1._2 + size._2  + buffer._2)
    val loc4 = (loc3._1 + size._1 + buffer._1, loc3._2)


    val i1 = new Intersection4 ("i1", loc1, this, Car,
        nArrivals, iArrRV, onTimeRV(0), offTimeRV(0), onTurnTimeRV(0), offTurnTimeRV(0), moveRV, size)

    val i2 = new Intersection4 ("i2", loc2, this, Car,
        nArrivals, iArrRV, onTimeRV(1), offTimeRV(1), onTurnTimeRV(0), offTurnTimeRV(0), moveRV, size)

    val i3 = new Intersection4 ("i3", loc3, this, Car,
        nArrivals, iArrRV, onTimeRV(2), offTimeRV(2), onTurnTimeRV(0), offTurnTimeRV(0), moveRV, size)

    val i4 = new Intersection4 ("i4", loc4, this, Car,
        nArrivals, iArrRV, onTimeRV(3), offTimeRV(3), onTurnTimeRV(0), offTurnTimeRV(0), moveRV, size)

    Intersection4.join (i1.east  (), i2.west  (), (_fourthf, _halff), (_fourthf, _halff))
    Intersection4.join (i2.south (), i3.north (), (_fourthf, _halff), (_fourthf, _halff))
    Intersection4.join (i3.east  (), i4.west  (), (_fourthf, _halff), (_fourthf, _halff))

    private val qlPairs   = i1.qlPair  ++: i2.qlPair  ++: i3.qlPair  ++: i4.qlPair
    private val tqlPairs  = i1.tqlPair ++: i2.tqlPair ++: i3.tqlPair ++: i4.tqlPair
    private val routesIn  = i1.roadIn  ++: i2.roadIn  ++: i3.roadIn  ++: i4.roadIn
    private val routesOut = i1.roadOut ++: i2.roadOut ++: i3.roadOut ++: i4.roadOut

    val getParts = i1.getComponents () ::: i2.getComponents () ::: i3.getComponents () ::: i4.getComponents ()

    addComponents (getParts)


/*    for (p <- getParts) {
        if (p.isInstanceOf [Route]) {
            val r = p.asInstanceOf [Route]
            println ("Route = " + r.me + ", straight = " + r.to.me + ", left = " + (if (r.turn != null) r.turn.me else "null"))
        }
    }
*/

    def _fourthf (x: Double): Double = 0.25

    def _halff (x: Double): Double = 0.5

    def nextLight (r: Route, dir: Int): Tuple2 [Gate, Gate] =
    {
        for ((q, l) <- qlPairs if q == r.to) return l 
        flaw ("nextLight", "no matching light found for queue given dir = " + dir) 
        return null
    } // nextLight

    def firstRoad (actor: SimActor): Route =
    {
        for (route <- routesIn if route.from == actor.mySource) return route
        flaw ("firstRoad", "no matching route found for source " + actor.mySource.id) 
        return null
    } // firstRoad

    def nextRoad (r: Route, dir: Int): Route =
    {
        val nlights = nextLight (r, dir)
        val nlight = if (dir == 1) nlights._1 else nlights._2            
//            val nlight = if (dir == 2) nlights._2 else nlights._1    
        for (route <- routesOut if route.from == nlight) return route 
        flaw ("nextRoad", "no matching route found for light given dir = " + dir) 
        return null        
    } // nextRoad

    def nextQueue (r: Route, dir: Int): WaitQueue = 
    {
        r.to.asInstanceOf [WaitQueue]
    }

    def nextSink (r: Route): Sink = r.to.asInstanceOf [Sink]

    def isNextSink (r: Route): Boolean = r.to.isInstanceOf [Sink]

    case class Car () extends SimActor ("c", this)
    {
        def act ()
        {
            val i = subtype                      // from North (0), East (1), South (2), West (3)
            val l = rng.igen                     // select lane l
            var r = firstRoad (this)             // first road
            r.lane(l).jump ()
            while (!isNextSink (r)) {
                val dir = 1
                if (nextLight(r, dir)._1.shut) nextQueue(r, dir).waitIn
                r = nextRoad (r, dir)
                r.lane(l).jump ()
            } // while 
            nextSink(r).leave ()
        } // act

    } // Car

} // TrafficModel class




