
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  Michael Cotterell, Casey Bowman, John Miller
 *  @version 1.1
 *  @date    Sun Feb 16 21:30:20 EST 2014
 *  @see     LICENSE (MIT style license file).
 */

package apps.traffic2

import java.util.concurrent.Semaphore
import java.io.{BufferedReader, FileReader, FileWriter}

import collection.mutable.{ListBuffer, Map}

import math.{abs, floor, round}

import scalation.analytics._
import scalation.calculus.Calculus.FunctionS2S
import scalation.linalgebra.{MatrixD, VectorD, VectorI}
import scalation.metamodel.QuadraticFit
import scalation.minima._
import scalation.process._
import scalation.random.{Bernoulli, DiscreteF, Exponential, Normal, Sharp, Uniform, Variate}
import scalation.stat.StatVector
import scalation.util.Monitor._
import scalation.util.Timer.time
import scalation.util.CachedFunctionV2S

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `Traffic` object is used to run the `TrafficModel` class.
 */
object Traffic extends App 
{
//    for (i <- 0 until 200) {
//    println ("****** simulation #" + i)
    val maxCars = 50
    val onTimeRV  = Array (Sharp (8000).asInstanceOf [Variate], 
                           Sharp (6000).asInstanceOf [Variate],
                           Sharp (4000).asInstanceOf [Variate],
                           Sharp (3000).asInstanceOf [Variate])
    val offTimeRV = Array (Sharp (3000).asInstanceOf [Variate],
                           Sharp (4000).asInstanceOf [Variate],
                           Sharp (6000).asInstanceOf [Variate], 
                           Sharp (8000).asInstanceOf [Variate])
    val iArrRVs = (Sharp (2.0), Sharp (2.0))

    val rm = new TrafficModel ("traffic", maxCars, iArrRVs,
                               onTimeRV, offTimeRV, onTimeRV, offTimeRV, 
                               Uniform (2900, 3100), Array(0.0, 0.0), 
                               Array(0.0, 0.0), Array(0.0, 0.0))
//    Coroutine.startup ()
    rm.simulate ()
    rm.complete ()
//    val lps = Coroutine.shutdown ()
//    Thread.sleep (1000)
//    }

} // Traffic2 object
/*
object CreateQuadraticFit extends App
{
    val br = new BufferedReader (new FileReader ("responses.txt"))
    var line: String = null
    def f (x: VectorD): Double = 0.0
    val x0 = VectorD (40.0, 40.0, 30.0, 30.0)    // (NWGreen, EWGreen, turn, offset)
    val xs = VectorD (1.0, 1.0, 1.0, 1.0)
    val n = 4
    val nt = ((n + 1) * (n + 2)) / 2
    val qf = new QuadraticFit (f, n)
    qf.formGrid (x0, xs)
    val grid = qf.getGrid ()
    val x = new MatrixD (grid.size, nt)
    for (i <- 0 until grid.size) x(i) = qf.qForms (grid(i))
    val y = new VectorD (grid.size)
    var done = false
    while (!done) {
        line = br.readLine ()
        if (line == null) done = true
        else {
            val s = line.split(",")
            val k = s(0).toInt
            y(k) = s(1).toDouble
        }
    }
    qf.printQForms ()
    qf.fit ((x,y))
    
    def fp (x: VectorD): Double = qf.qFormsEval (x)

    def gp (x: VectorD): Double =
    {
        var sum = 0.0
        for (i <- 0 until x.dim) if (x(i) < 0.0) sum -= x(i)	
        sum
    }

    val opt  = new QuasiNewton (fp)
    val opt2 = new ConjGradient (fp)
    val opt3 = new SteepestDescent (fp)
    val res  = opt.solve (x0)
    val res2 = opt2.solve (x0)
    val res3 = opt3.solve (x0)
    println ("x = " + res + ", f(x) = " + fp(res))
    println ("x = " + res2 + ", f(x) = " + fp(res2))
    println ("x = " + res3 + ", f(x) = " + fp(res3))
}*/

object TrafficOptI extends App
{
    val iArrRVs = (Exponential (8.0), Exponential (4.0))
//    val iArrRVs = (Sharp (3.0), Sharp (6.0))

    val REPS = 2
    val out   = new MatrixD (REPS, 1)
    val in    = new VectorD (0)    
    var counter = 0
    val sema  = new Semaphore (0)

    val upper = Array (80.0, 80.0, 60.0, 60.0)
    val lower = Array (1.0,  1.0,  1.0,  0.0)

    var functionCallCount = 0
    var runReplicasCount  = 0

    val x0 = VectorI (5, 300, 2, 30)    // (NWGreen, EWGreen, turn, offset)
    val xs = VectorD (2.0, 2.0, 2.0, 2.0)

    val intOffsets = Array.ofDim [Double] (4)

    val mainOffsets = Array.ofDim [Double] (2)
    val turnOffsets = Array.ofDim [Double] (2)

    val onTimeRV      = Array.ofDim [Variate] (4)
    val offTimeRV     = Array.ofDim [Variate] (4)
    val onTurnTimeRV  = Array.ofDim [Variate] (4)
    val offTurnTimeRV = Array.ofDim [Variate] (4)
    
//    for (i <- 2 to 60) f(VectorI(i, i, i / 2, i))    

    val optimizer = new IntegerLocalSearch (f, g)
    val sol = optimizer.solve (x0)
    println ("x = " + sol)

    def f (x: VectorI): Double = 
    {      
        counter += 1
        val NSGrn  = x(0).toDouble
        val EWGrn  = x(1).toDouble
        val turn   = x(2).toDouble
        val offset = x(3).toDouble
        val NSRed  = EWGrn + 2 * turn
        val EWRed  = NSGrn + 2 * turn
        
        turnOffsets(0) = 0.0
        mainOffsets(0) = turn
        turnOffsets(1) = turn + NSGrn
        mainOffsets(1) = 2 * turn + NSGrn

        intOffsets(0) = 0.0
        intOffsets(1) = offset
        intOffsets(2) = 0.0
        intOffsets(3) = offset 

        onTimeRV (0) = Sharp(NSGrn)
        offTimeRV(0) = Sharp(NSRed)
        onTimeRV (1) = Sharp(EWGrn)
        offTimeRV(1) = Sharp(EWRed)
        onTimeRV (2) = Sharp(NSGrn)
        offTimeRV(2) = Sharp(NSRed)
        onTimeRV (3) = Sharp(EWGrn)
        offTimeRV(3) = Sharp(EWRed)


        onTurnTimeRV (0) = Sharp (turn)
        offTurnTimeRV(0) = Sharp (NSGrn + EWGrn + turn)
        onTurnTimeRV (1) = Sharp (turn)
        offTurnTimeRV(1) = Sharp (NSGrn + EWGrn + turn)
        onTurnTimeRV (2) = Sharp (turn)
        offTurnTimeRV(2) = Sharp (NSGrn + EWGrn + turn)
        onTurnTimeRV (3) = Sharp (turn)
        offTurnTimeRV(3) = Sharp (NSGrn + EWGrn + turn)      

        val stopTime = 1000.0

        val tm = new TrafficModel ("Traffic Model" + counter, 10000, iArrRVs, 
                                   onTimeRV, offTimeRV, onTurnTimeRV, offTurnTimeRV,
                                   Uniform (20, 30), intOffsets, mainOffsets,
                                   turnOffsets)
        tm.setStopTime (stopTime)
//        Coroutine.startup ()
        tm.simulate (0.0)               
//        val lps = Coroutine.shutdown ()
//        println ("lps = " + lps)

        tm.complete ()

//        val through = new StatVector (tm.gateNums.size)
//        var j = 0
//        for ((key,value) <- tm.gateNums) {
//            through(j) = value
//            j += 1
//        }

//        println ("throughput = " + through)
//        println ("stddev = " + through.stddev)
//        println ("mean   = " + through.mean)

        val sq      = tm.statV.filter{ case (key, value) => key contains "q"      }.map { case (key, value) => value(0) }
        val nq      = tm.statN.filter{ case (key, value) => key contains "q"      }.map { case (key, value) => value(0) }
	val sv      = tm.statV.filter{ case (key, value) => key contains "sink"   }.map { case (key, value) => value(0) }
        val sinkN   = tm.statN.filter{ case (key, value) => key contains "sink"   }.map { case (key, value) => value(0) }
        val sourceN = tm.statN.filter{ case (key, value) => key contains "source" }.map { case (key, value) => value(0) }
        val lightN  = tm.statN.filter{ case (key, value) => key contains "light"  }.map { case (key, value) => value(0) }
        
//        println ("**** lightN = " + lightN)

        val sumQ = sq.reduceLeft      (_+_)
        val sumV = sv.reduceLeft      (_+_)
        val sumK = sinkN.reduceLeft   (_+_)
        val sumS = sourceN.reduceLeft (_+_) 
        val qNum = nq.reduceLeft      (_+_)

        val diff = sumS - sumK 
//        println ("sumS = " + sumS)
//        println ("sumK = " + sumK)
//        println ("sumV = " + sumV)
//        println ("diff = " + diff)

//        println ("qNum = " + qNum)

        val w = (.5, .5)

        val res = w._1 * sumV / sumK + w._2 * diff                     // w._1 * through.mean
//        println (":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::")
        println (counter + ":\tx = " + x + ", f(x) = " + res)
        res

    }

    def g (x: VectorI): Double =
    {      
        var sum = 0.0

        for (i <- 0 until x.dim) {
            if (x(i).toDouble < lower(i)) sum += (x(i).toDouble - lower(i)) * (x(i).toDouble - lower(i))
//            if (x(i) > upper(i)) sum += abs (x(i) - upper(i))
        }    
//        println ("g(x) = " + sum)
        sum
    }
}

object TrafficOpt extends App
{
//    var k = 0
//    if (args.length > 0) k = args(0).toInt

//    val fw = new FileWriter ("responses.txt", true)

    val iArrRVs = (Exponential (0.05), Exponential (.1))
//    val iArrRVs = (Sharp (3.0), Sharp (6.0))

    val REPS = 2
    val out   = new MatrixD (REPS, 1)
    val in    = new VectorD (0)    
    var counter = 0
    val sema  = new Semaphore (0)

    val upper = Array (80.0, 80.0, 60.0, 60.0)
    val lower = Array (1.0,  1.0,  1.0,  0.0)

    var functionCallCount = 0
    var runReplicasCount  = 0

    val x0 = VectorD (5.0, 300.0, 2.0, 30.0)    // (NWGreen, EWGreen, turn, offset)
    val xs = VectorD (2.0, 2.0, 2.0, 2.0)

    val intOffsets = Array.ofDim [Double] (4)

    val mainOffsets = Array.ofDim [Double] (2)
    val turnOffsets = Array.ofDim [Double] (2)

    val onTimeRV      = Array.ofDim [Variate] (4)
    val offTimeRV     = Array.ofDim [Variate] (4)
    val onTurnTimeRV  = Array.ofDim [Variate] (4)
    val offTurnTimeRV = Array.ofDim [Variate] (4)

    val f = new CachedFunctionV2S (ff)

/* 
    val qf = new QuadraticFit (f, 4, 5)
    qf.formGrid (x0, xs)
    qf.printQForms ()
             
//    val grid = qf.getGrid ()
    val (xx, yy) = time { qf.response () }
    qf.fit (xx, yy)
    val b = qf.getB     
    println (isPosDef (b, 4))    

    def isPosDef (b: VectorD, d: Int): Boolean =
    {
        val inds = VectorD.range (2, d + 2).cumulate 
        for (i <- inds if b(i.toInt) <= 0.0) return false
        true
    }
*/    
//    val end = if (grid.size - k < 100) grid.size else k + 100 
//    val end = grid.size

//    for (i <- 0 until end) {
//        print (i + ": ")
//        fw.write (i + "," + f(grid(i)) + "\n")
//    }
//    fw.close ()

//    val result = qf.response (k)
//    val xx = result._1
//    val yy = result._2

//    qf.fit (result)
    
//    def fp (x: VectorD): Double = qf.qFormsEval (x)

//    val optimizer = new QuasiNewton (f, g)
//    val optimizer = new CoordinateDescent (f, g, exactLS = false)
//    val optimizer = new NelderMeadSimplex (f, 4)    
  
//    val res = optimizer.solve (x0)

//    println ("solution: x = " + res + " and f(x) = " + f(res))

//    val optimizer = new QuasiNewton (f, g)
//    val optimizer = new ConjGradient (f, g)
//    val solution  = optimizer.solve (x0)
//    println ("x = " + solution + ", f(x) = " + f(solution))

//    for (i <- 2 to 60) f(VectorD(i, i, i / 2.0, i))    

   f (VectorD (40.0, 40.0, 20.0, 20.0))

    def ff (x: VectorD): Double = 
    {      
        counter += 1
        val NSGrn  = x(0)
        val EWGrn  = x(1)
        val turn   = x(2)
        val offset = x(3)
        val NSRed  = EWGrn + 2 * turn
        val EWRed  = NSGrn + 2 * turn
        
        turnOffsets(0) = 0.0
        mainOffsets(0) = turn
        turnOffsets(1) = turn + NSGrn
        mainOffsets(1) = 2 * turn + NSGrn

        intOffsets(0) = 0.0
        intOffsets(1) = offset
        intOffsets(2) = 0.0
        intOffsets(3) = offset 

        onTimeRV (0) = Sharp(NSGrn)
        offTimeRV(0) = Sharp(NSRed)
        onTimeRV (1) = Sharp(EWGrn)
        offTimeRV(1) = Sharp(EWRed)
        onTimeRV (2) = Sharp(NSGrn)
        offTimeRV(2) = Sharp(NSRed)
        onTimeRV (3) = Sharp(EWGrn)
        offTimeRV(3) = Sharp(EWRed)


        onTurnTimeRV (0) = Sharp (turn)
        offTurnTimeRV(0) = Sharp (NSGrn + EWGrn + turn)
        onTurnTimeRV (1) = Sharp (turn)
        offTurnTimeRV(1) = Sharp (NSGrn + EWGrn + turn)
        onTurnTimeRV (2) = Sharp (turn)
        offTurnTimeRV(2) = Sharp (NSGrn + EWGrn + turn)
        onTurnTimeRV (3) = Sharp (turn)
        offTurnTimeRV(3) = Sharp (NSGrn + EWGrn + turn)      

        val stopTime = 100.0

        val tm = new TrafficModel ("Traffic Model" + counter, 100, iArrRVs, 
                                   onTimeRV, offTimeRV, onTurnTimeRV, offTurnTimeRV,
                                   Uniform (20, 30), intOffsets, mainOffsets,
                                   turnOffsets)
        tm.setStopTime (stopTime)
        Coroutine.startup ()
        tm.simulate (0.0)               
        val lps = Coroutine.shutdown ()
        println ("lps = " + lps)

        tm.complete ()

//        val through = new StatVector (tm.gateNums.size)
//        var j = 0
//        for ((key,value) <- tm.gateNums) {
//            through(j) = value
//            j += 1
//        }

//        println ("throughput = " + through)
//        println ("stddev = " + through.stddev)
//        println ("mean   = " + through.mean)

        val sq      = tm.statV.filter{ case (key, value) => key contains "q"      }.map { case (key, value) => value(0) }
        val nq      = tm.statN.filter{ case (key, value) => key contains "q"      }.map { case (key, value) => value(0) }
	val sv      = tm.statV.filter{ case (key, value) => key contains "sink"   }.map { case (key, value) => value(0) }
        val sinkN   = tm.statN.filter{ case (key, value) => key contains "sink"   }.map { case (key, value) => value(0) }
        val sourceN = tm.statN.filter{ case (key, value) => key contains "source" }.map { case (key, value) => value(0) }
        val lightN  = tm.statN.filter{ case (key, value) => key contains "light"  }.map { case (key, value) => value(0) }
        
//        println ("**** lightN = " + lightN)

        val sumQ = sq.reduceLeft      (_+_)
        val sumV = sv.reduceLeft      (_+_)
        val sumK = sinkN.reduceLeft   (_+_)
        val sumS = sourceN.reduceLeft (_+_) 
        val qNum = nq.reduceLeft      (_+_)

        val diff = sumS - sumK 
        println ("sumS = " + sumS)
        println ("sumK = " + sumK)
        println ("sumV = " + sumV)
        println ("diff = " + diff)

        println ("qNum = " + qNum)

        val w = (.5, .5)

        val res = w._1 * sumV / sumK + w._2 * diff                     // w._1 * through.mean * through.mean
//        println (":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::")
        println (counter + ":\tx = " + x + ", f(x) = " + res)
        res

    }

    def g (x: VectorD): Double =
    {      
        var sum = 0.0

        for (i <- 0 until x.dim) {
            if (x(i) < lower(i)) sum += (x(i) - lower(i)) * (x(i) - lower(i))
//            if (x(i) > upper(i)) sum += abs (x(i) - upper(i))
        }    
//        println ("g(x) = " + sum)
        sum
    } 

}

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `Intersection4` class represents a four-way intersection.
 *
 */
class Intersection4 (name: String, pos: Tuple2 [Int, Int], model: Model, makeEntity: () => SimActor,
                     nArrivals: Int, iArrRVs: Tuple2 [Variate, Variate], onTimeRV: Variate,
                     offTimeRV: Variate, onTurnTimeRV: Variate, offTurnTimeRV: Variate,
                     val moveRV: Variate, size: Tuple2 [Int, Int] = (250, 250), 
                     offset: Double = 0.0, mainOffsets: Array[Double] = Array(0.0, 0.0), 
                     turnOffsets: Array[Double] = Array(0.0, 0.0))
{
    var (x, y) = pos // 800, 250
//    x += 250
//    y += 20

    val sourceX        = x + (round (.35 * size._1)).asInstanceOf [Int]
    val sourceY        = y
    val sourceWidth    = (round (.05 * size._1)).asInstanceOf [Int]
    val sourceHeight   = sourceWidth

    val source = Source.group (model, makeEntity, nArrivals, (sourceX, sourceY), 
//        (sourceWidth, sourceHeight),
        (name + "-sourceN", 0, iArrRVs._2, (0, 0)),
        (name + "-sourceE", 1, iArrRVs._1, ((round ( .6  * size._1)).asInstanceOf [Int],
                                   (round ( .35 * size._2)).asInstanceOf [Int])),
        (name + "-sourceS", 2, iArrRVs._2, ((round ( .25 * size._1)).asInstanceOf [Int],
                                   (round ( .95 * size._2)).asInstanceOf [Int])),
        (name + "-sourceW", 3, iArrRVs._1, ((round (-.35 * size._1)).asInstanceOf [Int],
                                   (round ( .6  * size._2)).asInstanceOf [Int]))).toArray

    val queueX      = sourceX
    val queueY      = y + (round (.225 * size._2)).asInstanceOf [Int]
    val queueWidth  = sourceWidth
    val queueHeight = sourceHeight

    val queue = WaitQueue.group ((queueX, queueY),
//        (queueWidth, queueHeight), 
        (name + "-qN", (0, 0)),
        (name + "-qE", ((round ( .375 * size._1)).asInstanceOf [Int], 
                        (round ( .125 * size._2)).asInstanceOf [Int])),
        (name + "-qS", ((round ( .25  * size._1)).asInstanceOf [Int],
                        (round ( .5   * size._2)).asInstanceOf [Int])),
        (name + "-qW", ((round (-.125 * size._1)).asInstanceOf [Int],
                        (round ( .375 * size._2)).asInstanceOf [Int]))).toArray

    val turnQX      = x + (round (.425 * size._1)).asInstanceOf [Int]
    val turnQY      = queueY
    val turnQWidth  = sourceWidth
    val turnQHeight = sourceHeight

    val turnQueue = WaitQueue.group ((turnQX, turnQY), 
//        (turnQWidth, turnQHeight),
        (name + "-tqN", (0, 0)),
        (name + "-tqE", ((round ( .3 * size._1)).asInstanceOf [Int],
                         (round ( .2 * size._2)).asInstanceOf [Int])),
        (name + "-tqS", ((round ( .1 * size._1)).asInstanceOf [Int],
                         (round ( .5 * size._2)).asInstanceOf [Int])),
        (name + "-tqW", ((round (-.2 * size._1)).asInstanceOf [Int], 
                         (round ( .3 * size._2)).asInstanceOf [Int]))).toArray

    val lightX      = sourceX
    val lightY      = y + (round (.625 * size._2)).asInstanceOf [Int]
    val lightWidth  = sourceWidth
    val lightHeight = sourceHeight

    val light = Gate.group (model, nArrivals, onTimeRV, offTimeRV, (lightX, lightY), 
        (lightWidth, lightHeight), 
        offset, mainOffsets, 100, 
        null,
        (name + "-lightN", queue(0), (0, 0)),    
        (name + "-lightE", queue(1), ((round (-.025 * size._1)).asInstanceOf [Int], 
                                  (round (-.275 * size._2)).asInstanceOf [Int])),
        (name + "-lightS", queue(2), ((round ( .25  * size._1)).asInstanceOf [Int],
                                  (round (-.3   * size._2)).asInstanceOf [Int])),
        (name + "-lightW", queue(3), ((round ( .275 * size._1)).asInstanceOf [Int], 
                                  (round (-.025 * size._2)).asInstanceOf [Int]))).toArray

    val turnLX      = turnQX
    val turnLY      = lightY
    val turnLWidth  = sourceWidth
    val turnLHeight = sourceHeight

    val turnLight = Gate.group (model, nArrivals, onTurnTimeRV, offTurnTimeRV, (turnLX, turnLY), 
        (turnLWidth, turnLHeight),
        offset, turnOffsets, 100, 
        Array (light(1), light(2), light(3), light(0)),
        (name + "-tlightN", turnQueue(0), (0, 0)),    
        (name + "-tlightE", turnQueue(1), ((round (-.1 * size._1)).asInstanceOf [Int], 
                                       (round (-.2 * size._2)).asInstanceOf [Int])),
        (name + "-tlightS", turnQueue(2), ((round ( .1 * size._1)).asInstanceOf [Int],
                                       (round (-.3 * size._2)).asInstanceOf [Int])),
        (name + "-tlightW", turnQueue(3), ((round ( .2 * size._1)).asInstanceOf [Int], 
                                       (round (-.1 * size._2)).asInstanceOf [Int]))).toArray

    val sinkX      = x + (round (.6 * size._1)).asInstanceOf [Int]
    val sinkY      = y
    val sinkWidth  = sourceWidth
    val sinkHeight = sourceHeight
    
    val sink = Sink.group ((sinkX, sinkY), 
//        (sinkWidth, sinkHeight), 
        (name + "-sinkN", (0, 0)),
        (name + "-sinkE", ((round ( .35 * size._1)).asInstanceOf [Int], 
                        (round ( .6  * size._2)).asInstanceOf [Int])),
        (name + "-sinkS", ((round (-.25 * size._1)).asInstanceOf [Int], 
                        (round ( .95 * size._2)).asInstanceOf [Int])),
        (name + "-sinkW", ((round (-.6  * size._1)).asInstanceOf [Int], 
                        (round ( .35 * size._2)).asInstanceOf [Int]))).toArray

    val roadIn  = Array.tabulate (source.size) (i => {
        new Route ("ra" + i, 2, source(i), queue(i), moveRV, false, 0.0, 0.0)
    })

    for (i <- 0 until roadIn.length) roadIn(i).setTurn (turnQueue(i))

    val roadOut = Array.tabulate (sink.size) (i => {
        new Route ("rb" + i, 2, light(i),  sink((i + 2) % 4),  moveRV)
    })

    val qlPair = Array.tabulate (queue.size) (i => (queue(i), (light(i), light((i + 1) % 4))))
 
    val tqlPair = Array.tabulate (turnQueue.size) (i => (turnQueue(i), (turnLight (i), light ((i + 3) % 4))))

//    val tqlPair = Array.tabulate (turnQueue.size) (i => (turnQueue(i), turnLight(i).redirect))

    import Intersection4._

    def _fourthf (x: Double): Double = 0.25

    def _halff (x: Double): Double = 0.5

    def north () : IWGD  =
    {
        (this, queue(0), turnQueue(0), light(2), Direction("NORTH"))
    } // north

    def east () : IWGD =
    {
        (this, queue(1), turnQueue(1), light(3), Direction("EAST"))
    } // east

    def south () : IWGD =
    {
        (this, queue(2), turnQueue(2), light(0), Direction("SOUTH"))
    } // south

    def west () : IWGD =
    {
        (this, queue(3), turnQueue(3), light(1), Direction("WEST"))
    } // west

    def getComponents (): List [Component] =
    {
        (source ++: queue ++: turnQueue ++: light ++: turnLight ++: sink ++: roadIn ++: roadOut).filter(e => e != null).toList
    } // getComponents

} // Intersection4

object Intersection4
{
    case class Direction (val name: String)

    type IWGD = Tuple5 [Intersection4, WaitQueue, WaitQueue, Gate, Direction]

    private def index (d: Direction): Int =
    {
        d match {
            case Direction("NORTH") => 0
            case Direction("EAST")  => 1
            case Direction("SOUTH") => 2
            case Direction("WEST")  => 3
        } // match
    } // index

    def join(a: IWGD, b: IWGD, fa: Tuple2 [FunctionS2S, FunctionS2S], 
                               fb: Tuple2 [FunctionS2S, FunctionS2S]): Unit =
    {
        val (i1, wq1, tq1, g1, d1) = a 
        val (i2, wq2, tq2, g2, d2) = b

        // get source and sink indices
        val i1i = index (d1)
        val i2i = index (d2)

        // remove source and sink from i1
        i1.source(i1i) = null
        i1.sink(i1i)   = null

        // remove source and sink from i2        
        i2.source(i2i) = null
        i2.sink(i2i)   = null

        // add the roads to the intersections

        val newMoveRV = Uniform (500, 600)

        val r1 = new Route (d1.name + "-" + d2.name, 2, g1, wq2, newMoveRV, false, 0.0, 0.0)
        val r2 = new Route (d2.name + "-" + d1.name, 2, g2, wq1, newMoveRV, false, 0.0, 0.0)
        
        r1.setSelector (DiscreteF (Array (fb._1, fb._2)))
        r2.setSelector (DiscreteF (Array (fa._1, fa._2)))

        r1.setTurn (tq2)
        r2.setTurn (tq1)

        i1.roadIn(i1i)            = r2
        i1.roadOut((i1i + 2) % 4) = r1
        i2.roadIn(i2i)            = r1
        i2.roadOut((i2i + 2) % 4) = r2

    } // join

} // Intersection4 object

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `TrafficModel` class simulates an intersection with four traffic lights
 *  (`Gates`) and four roads.  Each road consists of two routes with one in each
 *  direction.  Each `Route` has two lanes (`Transport`s).
 *  @param name       the name of the bank model
 *  @param nArrivals  the number of arrivals to generate (stopping condition)
 *  @param iArrlRV    the inter-arrival time distribution
 *  @param onTimeRV   the on (green-light) time distribution for North-South traffic
 *  @param offTimeRV  the off (red-light) time distribution for North-South traffic
 *  @param moveRV     the time distribution for motion along transports
 */
class TrafficModel (name: String, nArrivals: Int, iArrRVs: Tuple2 [Variate, Variate],
                         onTimeRV: Array [Variate], offTimeRV: Array [Variate],
                         onTurnTimeRV: Array [Variate], offTurnTimeRV: Array [Variate], 
                         moveRV: Variate, intOffsets: Array[Double], 
                         mainOffsets: Array[Double], turnOffsets: Array[Double])
      extends Model (name, reps = 1, aniRatio = 30.0, animating = true)
{

    val left = 0

    val straight = 1

    val right = 2

//    _reportsOff = true
    traceOff ()

    val rng  = Bernoulli ()

    val size = (300, 300)
    val buffer = (size._1 >> 2, size._2 >> 2)
 
    val loc1 = (50, 50)
    val loc2 = (loc1._1 + size._1 + buffer._1, loc1._2)
    val loc3 = (loc2._1 + size._1 + buffer._1, loc1._2)
//    val loc4 = (loc3._1 + size._1 + buffer._1, loc3._2)

    val i1 = new Intersection4 ("i1", loc1, this, Car,
        nArrivals, iArrRVs, onTimeRV(0), offTimeRV(0), onTurnTimeRV(0), offTurnTimeRV(0), moveRV, size)

    val i2 = new Intersection4 ("i2", loc2, this, Car,
        nArrivals, iArrRVs, onTimeRV(1), offTimeRV(1), onTurnTimeRV(0), offTurnTimeRV(0), moveRV, size)

    val i3 = new Intersection4 ("i3", loc3, this, Car,
        nArrivals, iArrRVs, onTimeRV(2), offTimeRV(2), onTurnTimeRV(0), offTurnTimeRV(0), moveRV, size)

//    val i4 = new Intersection4 ("i4", loc4, this, Car,
//        nArrivals, iArrRV, onTimeRV(3), offTimeRV(3), onTurnTimeRV(0), offTurnTimeRV(0), moveRV, size)

    Intersection4.join (i1.east (), i2.west (), (_fourthf, _halff), (_fourthf, _halff))
    Intersection4.join (i2.east (), i3.west (), (_fourthf, _halff), (_fourthf, _halff))
//    Intersection4.join (i3.east (), i4.west (), (_fourthf, _halff), (_fourthf, _halff))

    private val qlPairs   = i1.qlPair  ++: i2.qlPair  ++: i3.qlPair      // ++: i4.qlPair
    private val tqlPairs  = i1.tqlPair ++: i2.tqlPair ++: i3.tqlPair     // ++: i4.tqlPair
    private val routesIn  = i1.roadIn  ++: i2.roadIn  ++: i3.roadIn      // ++: i4.roadIn
    private val routesOut = i1.roadOut ++: i2.roadOut ++: i3.roadOut     // ++: i4.roadOut

    val parts = i1.getComponents () ::: i2.getComponents () ::: i3.getComponents ()    // ::: i4.getComponents ()

    addComponents (parts)        

//    val gateNums: Map [Gate, Int] = Map ()

//    for (gate <- i1.light)     gateNums += (gate -> 0)
//    for (gate <- i2.light)     gateNums += (gate -> 0)
//    for (gate <- i3.light)     gateNums += (gate -> 0)
//    for (gate <- i1.turnLight) gateNums += (gate -> 0)
//    for (gate <- i2.turnLight) gateNums += (gate -> 0)
//    for (gate <- i3.turnLight) gateNums += (gate -> 0)

    def _fourthf (x: Double): Double = 0.25

    def _halff (x: Double): Double = 0.5

    def nextLight (r: Route, dir: Int): Tuple2 [Gate, Gate] =
    {
        if (dir == left) for ((tq, tl) <- tqlPairs if tq == r.turn) return tl 
        else             for ((q, l) <- qlPairs if q == r.to) return l 
        flaw ("nextLight", "no matching light found for queue given dir = " + dir) 
        return null
    } // nextLight

    def firstRoad (actor: SimActor): Route =
    {
        for (route <- routesIn if route.from == actor.mySource) return route
        flaw ("firstRoad", "no matching route found for source " + actor.mySource.id) 
        return null
    } // firstRoad

    def nextRoad (r: Route, dir: Int): Route =
    {
        val nlights = nextLight (r, dir)
        val nlight = if (dir == straight) nlights._1 else nlights._2            
//            val nlight = if (dir == 2) nlights._2 else nlights._1    
        for (route <- routesOut if route.from == nlight) return route 
        flaw ("nextRoad", "no matching route found for light given dir = " + dir) 
        return null        
    } // nextRoad

    def nextQueue (r: Route, dir: Int): WaitQueue = 
    {
        if (dir == left) {
//            println ("turning left from route " + r.id + " and waitqueue " + r.turn.id)
            r.turn.asInstanceOf [WaitQueue]
        }
        else r.to.asInstanceOf [WaitQueue]
    }

    val speedEff = Normal (22.0 * (1 - 220.0 / 1000.0))

    val speed = 3.0
   
    val length = 7.0

    val g = onTimeRV(0).mean

    val n2Release = floor (speed * g / length).toInt

//    println ("n2Release = " + n2Release)

    for (gate <- i1.light)     { gate.n2Release = n2Release; gate.ServiceTime = Sharp (5.0) }     
    for (gate <- i2.light)     { gate.n2Release = n2Release; gate.ServiceTime = Sharp (5.0) }
    for (gate <- i3.light)     { gate.n2Release = n2Release; gate.ServiceTime = Sharp (5.0) }
    for (gate <- i1.turnLight) { gate.n2Release = n2Release; gate.ServiceTime = Sharp (5.0) }
    for (gate <- i2.turnLight) { gate.n2Release = n2Release; gate.ServiceTime = Sharp (5.0) }
    for (gate <- i3.turnLight) { gate.n2Release = n2Release; gate.ServiceTime = Sharp (5.0) }

    def nextSink (r: Route): Sink = r.to.asInstanceOf [Sink]

    def isNextSink (r: Route): Boolean = r.to.isInstanceOf [Sink]

    case class Car () extends SimActor ("c", this)
    {
        def act ()
        {
            var stopped = false
            val i = subtype                      // from North (0), East (1), South (2), West (3)
            val l = rng.igen                     // select lane l
            var r = firstRoad (this)             // first road
//            r.lane(l).jump (TrafficCalc.timeGreen ())
            r.lane(l).move (TrafficCalc.timeGreen ())
            while (!isNextSink (r)) {
                val dir = r.select
                val nextlight = nextLight (r, dir)
//                gateNums(nextlight._1) += 1
                dir match {
                    case `left`     => stopped = true; if (nextlight._1.shut) nextQueue(r, dir).waitIn 
                    case `straight` => if (nextlight._1.shut) { nextQueue(r, dir).waitIn; stopped = true }
                    case _          => stopped = true
                } // match                
                r = nextRoad (r, dir)
                if (stopped) r.lane(l).move (TrafficCalc.timeRed ())
                else         r.lane(l).move (TrafficCalc.timeGreen ())
                stopped = false
            } // while 
            nextSink(r).leave ()
        } // act

    } // Car

} // TrafficModel class


object TrafficOpt2 extends App
{
    val iArrRVs = (Exponential (8.0), Exponential (4.0))

    val REPS = 2
    val out   = new MatrixD (REPS, 1)
    val in    = new VectorD (0)    
    var counter = 0
    val sema  = new Semaphore (0)

//    val upper = Array (80.0, 80.0)
    val lower = Array (5.0,  5.0)

    var functionCallCount = 0
    var runReplicasCount  = 0

    val x0 = VectorD (60.0, 60.0)    // (NWGreen, EWGreen)
    val xs = VectorD (2.0, 2.0)

    val intOffsets = Array.ofDim [Double] (4)

    val mainOffsets = Array.ofDim [Double] (2)
    val turnOffsets = Array.ofDim [Double] (2)

    val onTimeRV      = Array.ofDim [Variate] (4)
    val offTimeRV     = Array.ofDim [Variate] (4)
    val onTurnTimeRV  = Array.ofDim [Variate] (4)
    val offTurnTimeRV = Array.ofDim [Variate] (4)

//    val optimizer = new QuasiNewton (f, g)
//    val optimizer = new CoordinateDescent (f, g, exactLS = false)
//    val optimizer = new NelderMeadSimplex (f, 4)    
  
//    val res = optimizer.solve (x0)

//    println ("solution: x = " + res + " and f(x) = " + f(res))

//    for (i <- 10 to 100) f (VectorD (i, i))
//        for (j <- i - 2 to i + 2) f (VectorD (i, j))
//    }

    def f (x: VectorD): Double = 
    {      
        counter += 1
        val NSGrn  = x(0)
        val EWGrn  = x(1)
        val turn   = 0.15 * (x(0) + x(1))
        val offset = 0.25 * (x(0) + x(1))
        val NSRed  = EWGrn + 2 * turn
        val EWRed  = NSGrn + 2 * turn
        
        turnOffsets(0) = 0.0
        mainOffsets(0) = turn
        turnOffsets(1) = turn + NSGrn
        mainOffsets(1) = 2 * turn + NSGrn

        intOffsets(0) = 0.0
        intOffsets(1) = offset
        intOffsets(2) = 0.0
        intOffsets(3) = offset 

        onTimeRV (0) = Sharp(NSGrn)
        offTimeRV(0) = Sharp(NSRed)
        onTimeRV (1) = Sharp(EWGrn)
        offTimeRV(1) = Sharp(EWRed)
        onTimeRV (2) = Sharp(NSGrn)
        offTimeRV(2) = Sharp(NSRed)
        onTimeRV (3) = Sharp(EWGrn)
        offTimeRV(3) = Sharp(EWRed)


        onTurnTimeRV (0) = Sharp (turn)
        offTurnTimeRV(0) = Sharp (NSGrn + EWGrn + turn)
        onTurnTimeRV (1) = Sharp (turn)
        offTurnTimeRV(1) = Sharp (NSGrn + EWGrn + turn)
        onTurnTimeRV (2) = Sharp (turn)
        offTurnTimeRV(2) = Sharp (NSGrn + EWGrn + turn)
        onTurnTimeRV (3) = Sharp (turn)
        offTurnTimeRV(3) = Sharp (NSGrn + EWGrn + turn)      

        val tm = new TrafficModel ("Traffic Model" + counter, 10000, iArrRVs, 
                                   onTimeRV, offTimeRV, onTurnTimeRV, offTurnTimeRV,
                                   Uniform (20, 30), intOffsets, mainOffsets,
                                   turnOffsets)
        tm.setStopTime (5000.0)
//        Coroutine.startup ()
        tm.simulate (0.0)               
//        val lps = Coroutine.shutdown ()
//        println ("lps = " + lps)
        tm.complete ()

        val sq      = tm.statV.filter{ case (key, value) => key contains "q"      }.map { case (key, value) => value(0) }
        val nq      = tm.statN.filter{ case (key, value) => key contains "q"      }.map { case (key, value) => value(0) }
	val sv      = tm.statV.filter{ case (key, value) => key contains "sink"   }.map { case (key, value) => value(0) }
        val sinkN   = tm.statN.filter{ case (key, value) => key contains "sink"   }.map { case (key, value) => value(0) }
        val sourceN = tm.statN.filter{ case (key, value) => key contains "source" }.map { case (key, value) => value(0) }
        
        val sumQ = sq.reduceLeft      (_+_)
        val sumV = sv.reduceLeft      (_+_)
        val sumK = sinkN.reduceLeft   (_+_)
        val sumS = sourceN.reduceLeft (_+_) 
        val qNum = nq.reduceLeft      (_+_)

        val diff = sumS - sumK 
        println ("sumS = " + sumS)
        println ("sumK = " + sumK)
        println ("sumV = " + sumV)
        println ("diff = " + diff)

        println ("qNum = " + qNum)

        val w = (.5, .5)

        val res = w._1 * sumV / sumK + w._2 * diff

//        println (":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::")
        println (counter + ":\tx = " + x + ", f(x) = " + res)
//        res
//        println ("" + counter + ":\tx = " + x + ", f(x) = " + sumQ / qNum)
//        sumQ / qNum
//        println ("" + counter + ":\tx = " + x + ", f(x) = " + sumV / (diff + 1))
//        sumV / (diff + 1) 
        res
    }

    def g (x: VectorD): Double =
    {      
        var sum = 0.0
        println ("***")
        for (i <- 0 until x.dim) {
            println ("x = " + x(i) + ", lower = " + lower(i))
            if (x(i) < lower(i)) sum += (x(i) - lower(i)) * (x(i) - lower(i))
//            if (x(i) > upper(i)) sum += abs (x(i) - upper(i))
        }    
//        println ("g(x) = " + sum)
        sum
    } 

}


